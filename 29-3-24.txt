Namespace


==>Namespace provide the space where we can define or declare identifier i.e. variable,  method, classes. Namespace are necessary if you want more than one function with the same name. You can declare two different namespaces for these functions and call them by referencing their corresponding namespace. 

==>A namespace is designed to overcome this difficulty and is used as additional information to differentiate similar functions, classes, variables etc. with the same name available in different libraries. 

==>The code generally has multiple libraries, and the namespace helps in avoiding the ambiguity that may occur when two identifiers have the same name.

For example, suppose you have two functions named calculate(), and both are performing different tasks. One calculate() function is doing the multiplication, and another is doing the addition. So in this case, to avoid ambiguity, you will declare both the functions in two different namespaces. These namespaces will differentiate both the functions and also provide information regarding both the functions.

==>The best example of namespace scope is the C++ standard library (std) where all the classes, methods and templates are declared. Hence while writing a C++ program we usually include the directive using namespace std;
==============================================
Defining a Namespace:
A namespace definition begins with the keyword namespace followed by the namespace name as follows:
namespace  namespace_name 
{
    // code declarations i.e. variable  (int a;)
    method (void add();)
    classes ( class student{};)
}
It is to be noted that, there is no semicolon (;) after the closing brace.
Namespace only define them in a global scope.
It is only present in C++ and not in C.
To access a class inside a namespace, you can use namespacename::classname. 
Namespace declarations don’t have access specifiers (Public or Private).

=================================================================

C++ Namespace Example
namespace Data
{
	class Manager
	{
	public:
	void task() {}
	}
};


You can access the class inside the above namespace in two ways:
1)by using :: operator
Data::Manager mgr;

Example:
#include <iostream>
using namespace std;
// first name space
namespace first_space
{
  void func()
  {
     cout << "Inside first_space" << endl;
  }
}
// second name space
namespace second_space
{
  void func()
  {
     cout << "Inside second_space" << endl;
  }
}
 
int main ()
{
       // Calls function from first name space.
      first_space :: func();
    // Calls function from second name space.
      second_space :: func(); 
      return 0;
}

Output
Inside first_space
Inside second_space

=======================================================================
2)By using  "using" directive 
==>You use the "using" directive to import the entire namespace into a program or another namespace. This directive eliminates the need to use the "namespace-name" every time. So it is better to use the "using" if you need several functions or classes from the namespace. Otherwise, if you only need to use it once or twice, "namespace-name" would be a better choice.
==>The using directive is positioned at the top of the program and it allows us to access all the namespace members.

using namespace Data;
Manager mgr;
mgr.task();


Example:
#include <iostream>
using namespace std;
// first name space
namespace first_space
{
int a=10;
  void func()
  {
     cout << "Inside first_space" << endl;
  }
}
 
// second name space
namespace second_space
{
  void func()
  {
     cout << "Inside second_space" << endl;
  }
}
using namespace first_space;
int main ()
{
   // This calls function from first name space.
  func();
cout<<a;
  return 0;
}

Output
Inside first_space
==========================================================
// without using std namespace
std::cout
std::cin
std::endl
std::exception
std::bad_cast

By including the using namespace std; code in our program, we can omit the std:: part for the identifiers defined in the std namespace:

// using std namespace
cout
cin
endl
exception
bad_cast



===========================================================

Nested Namespaces:
Namespaces can be nested where you can define one namespace inside another name space as follows:
SYNTAX:
    namespace namespace_name1 
    {
          // code declarations
          namespace namespace_name2 
          {
             // code declarations
          }
    }

You can access members of nested namespace by using resolution operators as follows:
// to access members of namespace_name2
using namespace namespace_name1::namespace_name2;
// to access members of namespace_name1
using namespace namespace_name1;
 

==>In the above statements if you are using namespace_name1, then it will make elements of namespace_name2 available in the scope.
#include <iostream>
using namespace std;
 
// first name space
namespace first_space
{
  void func()
  {
     cout << "Inside first_space" << endl;
  }
  // second name space
  namespace second_space
  {
     void func()
     {
        cout << "Inside second_space" << endl;
     }
  }
}
using namespace first_space;
int main ()
{
    
      func();
   second_space::func();
      return 0;
}








=========================================================


 #include <iostream>
using namespace std;
 
// Variable created inside namespace
namespace first {
int val = 500;
}
 // Global variable
int val = 100;
int main()
{
    // Local variable
    int val = 200;
 
    // These variables can be accessed from outside the namespace using the scope ::
       cout << first::val << '\n';
 
    return 0;
}

Output
500

===================================================================
 #include <iostream>
using namespace std;

 
// Variable created inside namespace
namespace first {
int val = 500;
}
 // Global variable
int val = 100;
using namespace first;
int main()
{
    // Local variable
    int val = 200;
 
    // These variables can be accessed from outside the namespace using the scope ::
       cout <<first:: val << '\n';
 
    return 0;
}

====================================================
// A C++ program to demonstrate use of class in a namespace
// A C++ program to demonstrate use of class in a namespace
#include<iostream>
using namespace std;
 
namespace ns
{
    // A Class in a namespace
    class A
    {
    public:
        void display()
        {
            cout<<"ns::A::display()"<<endl;;
        }
    };
}
namespace ns1
{
    // A Class in a namespace
    class A
    {
    public:
        void display()
        {
            cout<<"ns1::A::display()"<<endl;;
        }
    };
}
 
int main()
{

    ns1::A obj;
 
    obj.display();
 
    return 0;
}

================================================================
A class can also be declared inside namespace and defined outside namespace using the following syntax: 

   
// A C++ code to demonstrate that we can define
// methods outside namespace.
#include <iostream>
using namespace std;
 
// Creating a namespace
namespace ns {
void display();
class geek {
public:
    void display();
};
} // namespace ns
 
// Defining methods of namespace
void ns::geek::display()
{
    cout << "ns::geek::display()\n";
}
void ns::display() { cout << "ns::display()\n"; }
 
// Driver code
int main()
{
    ns::geek obj;
    ns::display();
    obj.display();
    return 0;
}
Output:

ns::display()
ns::geek::display():
==========================================================
Standard Namespace
The std is a short form of standard, the std namespace contains the built-in classes and declared functions.
You can find all the standard types and functions in the C++ "std" namespace.

#include<iostream>
int main()
{
	std::cout<<"enter no to add";
	int num1,num2;
	std::cin>>num1;
	std::cin>>num2;
	std::cout<<"addition is"<<num1+num2;
}
Here std is used in front of cin and cout along with scope resolution operator, which indicates that the object cin and cout are defined inside the namespace whose name is std.The std is the standard library, and both cin and cout are defined inside this scope.

====================================================================
Advantage
The primary advantage of namespaces is that they resolve any naming conflict. For example, sometimes, you may need more than one function with the same name. And namespaces provide a way to declare such functions without making the compiler ambiguous. 
====================================================================
FAQ::
FAQ::
 #include <iostream>
using namespace std;
namespace ns
{
	void show()
	{
		cout<<"in 1st show\n";
	}
}
namespace ns
{
	void show1()
	{
		cout<<"in 2nd show\n";
	}
}
int main()
{
  ns::show1();
 
    return 0;
}


DIFFERENCE BETWEEN CLASS AND NAMESPACE

namespace A {
int f1();
}
 
namespace A {
int f2();
}
is legal, but: 

   
class A {
    int f1();
};
 
class A { // illegal
    int f2();
};

=======================================================================================
You can have unnamed namespaces but you can’t have a unnamed class.For example: 
 #include <iostream>
using namespace std;
namespace 
{
	void show()
	{
		cout<<"in 1st show\n";
	}
}
namespace 
{
	void show1()
	{
		cout<<"in 2nd show\n";
	}
}
int main()
{
  show();
 
    return 0;
}

   
namespace { // fine
 
// some code....
}
 
class { // illegal
}You can have unnamed namespaces but you can’t have a unnamed class.For example: 

   
namespace { // fine
 
// some code....
}
 
class { // illegal
}
================================================




















Cons of using the whole namespace in C++?
Header1.h :
   
namespace one 
{ 
    /*Function to print name of the namespace*/
    void print() 
    { 
        std :: cout << "This is one" << std :: endl; 
    } 
} 
Header2.h
   
namespace two 
{ 
    /*Function to print name of the namespace*/
    void print() 
    { 
        std :: cout << "This is two" << std :: endl; 
    } 
} 
Source code file
   
/*Including headers*/
#include <iostream> 
#include "Header1.h" 
#include "Header2.h" 
  
/*Using namespaces*/
using namespace std; 
using namespace one; 
using namespace two; 
  
/*Driver code*/
int main() 
{ 
    /*Ambiguity*/
    print(); 
} 

Output:
Error: Call of overloaded print() is ambiguous.
To overcome this situation, we use namespace objects independently through scope resolution operator. 
=======================================================================
 #include <iostream>
using namespace std;
namespace one
{
	void show()
	{
		cout<<"in 1st show\n";
	}
}
namespace two
{
	void show()
	{
		cout<<"in 2nd show\n";
	}
}
using namespace one;
using namespace two;
int main()
{
  show();
 
    return 0;
}
===========================================================================

