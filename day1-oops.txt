Introduction to C++



C++ was invented by Bjarne Stroustrup in 1979 at Bell lab.
initially he called this lang as, c with classes,later in 1983 the name was changed to c++.


==>C++ is a general purpose/multipurpose,high level,compiler based and object oriented programming language.

==>What is general purpose?
purpose means usage
by using c++ we can design different types of s/ws


Types of programming language
1. Low-level programming language
Low-level language is machine-dependent (0s and 1s) programming language. The processor runs low- level programs directly without the need of a compiler or interpreter, so the programs written in low-level language can be run very fast.


2. High-level programming language (HLL) -It is designed for developing user-friendly software programs and websites.
This programming language requires a compiler or interpreter to translate the program into machine language (execute the program).
Example: Python, Java, JavaScript, PHP, C#, C,C++, etc.
A high-level language is further divided into two parts -
	a)Procedural Oriented programming language
	b)Object-Oriented Programming language


ques)which s/w application we can create using c++?
==>using c++ , we can design operating system(dos,window,unix)
==>using c++,we can design editors(notepad,wordpad,editplus)
==>using c++,we can design commercial application(related to money like (bank program,hotel managment program,supermarket program)
In supermarket,bill should be generated,billing program is designed using c++.Bank transactions application is designed using c++.
==>using c++,we are also able to design database(oracle is designed by c and c++)
==>using c++,we can also design translators(compiler,interpreter,assembler)
compiler and interpreter are used to convert high level lang to machine code.
assembler is used to convert low level lang to machine code.
In c++ we are using compiler as a translator,thats why c++ is called as compiler based programming lang.
==>using c++,we can design PC and mobile games. ex:snake game,mario etc.
=========================================================
Software is a collection of programs. /it is a digitized automated process
program is a set of instructions

===============================================================================
Object oriented programming
==>C++ is an extension of C programming
==>learn limitation and adv of c, how it is solved in c++?

Function oriented programming lang/Procedural Language:

==>Total program is divided into small programs called as functions. 
Advantages are:
easy to identify errors
modularity
reusability(write once use many times)

Function is a small program which is ued to do a particular job.


Entire c program is collection of functions thats why c++ is called as function oriented programming lang.
procedural lang means all data stored at one place
all data accessible to all function
data is not secured
===============================================

problem with function
==>when program is big ,when data is global then to identify  which variable is accesed by which function  is 
very difficult.problem is when data is global ,any function can access it . so data is not secured because data is freely moving around the function.
==>In c programming lang, data and function is seperately stored and global data is accessible to every function.
but in oop they bind variable and function in single unit called as object. when it make private it is accessible only within that funtion.
==>it is difficult to map real world entities into system design.it is difficult to bind data to the functionality of the system because its functionality is considered seperately
==>debugging a structured program is difficult and time consuming process.since data is shared over the entire program,different functions may be accessing it.to exactly find whuch function is causing the error is not easy.



Ex:
In a class several students are there,every student is having its own data.one student data doesnt belong to another student data.

stu1 obj
id ,name,fees----->attributes
To access this variables we have to use function,this function is able to access only student1 data
stu2 obj
id ,name,fees----->attributes,to access this variables we have to use function,this function is able to access only student2 data

i.e  data is seperated into no of blocks called object called as object1,object 2.
object1 contains first student data,object2 contains 2nd student data.
total program is divided into several objects. thatwhy c++ is called as object oriented programming structure.

ex:supemarket bill 
ITEM		QTY		PRICE		AMOUNT
A			10		10			100
B			20		20			200

object1 contains A item details only. object2 contains B item details only.

in oop function and data both are link with one another.obj is having variables,these variables are accessible only within the fun associated with that object called as data hiding.
===================================================================================
object oriented programming features

1)class-->extension of c structure
structure is collection of  heterogenous datatype. structure allows us to store different types of variables at one place under one name.due to structure ,it is very easy to construct object oriented programming.
In oop will going to use class but that class derived/extension of c structure.

==>we can able to declared both primitive and derived datatype at one place using structure.
ex:
I want to store student related data at one place ..
 struct stu
{
int id;primitaive
int marks[6];//derived;
};
structure is constructed based on the user requirement  thats  why structure is called as user defined datatyes...

 struct stu
{
int id;primitaive
int marks[6];//derived;
}s1,s2;//structure variable stored on stack.

here  s1 stores 1 student data which is called as 1 object,now it is called object oriented .
structure are the foundations to create class in c++.

********disadvantage with structure*********
In c lang structure data is by default public.structure can be accessed from anywhere within the program. 
now to avoid this they have introduced class.

In c++ also, we are having structure.

Whats the difference between structure in C and structure in C++?
In C ,inside the structure we can declare only variables(member structure) . while in C++,we can declare member structure +member function

**In c++ also structure data is public.that means anyone can access data from anywhere,not secured.
that why they have introduced class in c++.
==========================================
In c++,the private data shld be accessed only with the member function of the same class.
struct  student
{
private/protected/public   datatype
datamembers
memberfunctions;
};
class student
{
private/protected/public   datatype
datamembers
memberfunctions;
};
using c++ structure ,we cannot define complex programs.But it is possible with the class concepts.

2)class uses the concept of inheritance but structure in c++ never uses the concept of inheritance

3)if we dont specify access specifier to a data member of a class by default all the members become private
3)in c++ structure by default all the members are public. by default structure data is public,class data is private. 
====================================================================================
when it is private what will happen?
class student
{
int id;//data members
public:
void get()
{
cout<<id;
}
}
get() is the member of the class thats why it is called as member function.
with the help of member function of a class we can access private data of a class.this data cannot be accessible from outside the class called as
data hiding. mostly achieve using private access specifier.
data hiding means insulating the data from external access. outsiders cannot access the data.only member function can access the data. 
ex:mobile ph

**class is a collection of data members and member function both are associated together into a single unit called as class is called encapsulation
encapsulation is a process of binding the data under member function together into a single unit  called class.

class provides data hiding,encapsulation(binding of data and function into a single unit called as class)

====================================================> In class, to access the data member first memory should be allocated,for this the object shld be created.

OBJECT

==>In structure,structure variable should be created to access the structure members.
==>In class,class variables are called as object.
object means it is a variable of type class.

class stu
{
};
stu s;//object  (memory allocation takes place)
==>this obj is created from this class, that why  class is called as blueprint(original copy) to construct the object(xerox copy). thatswhy
to create object we need class,thats  why class is a blueprint and object is the instance of the class.

==>object is the physical representation of a class.when object is created then only memory allocation takes place. class never allocates memory i.e logical representation.
==================================================
Difference between C structure and C ++ structure

1)collection of variables                     collection of variables and function
2)structure members are public       structure members are 											  											private,protected,public
-------------------------------------------------------------------------------
similarities between  C++ structure and class
1)userdefined                          				  userdefined
2)collection of variables & functions   		collection of 	variables & functions
3)members are private,protected,public		members are 																							private,protected,public
-------------------------------------------------------------------		
Differences between  C	++ structure and class
1)by default members are public 		by default members	are private
2) structure cannot be inherited		class can be inherited
3)used to build simple program			uses to build complex program,big project
not used in bank prog,reservation
============================================================================
class:
1)it is a userdefined datatypes because we r constructing a class based on primitive and derived datatype as per user requrimemt

2)collection of datamembers and member functions
3)it is a container because it contains members.
4)class provides the concept of encapsulation(binding of data memebrs and member function in a single unit),provides the concept of data hiding with private access specifier.
5)class is a blueprint to constructs the objects i.e it is a plan before constructing objectts
paper plan(class)--------->  real building(object)
6)class is a logical copy to create objects thats why class never occupies memory.

syntax:
class classname//class is keyword
{
access specifier://it specifies how it is going to access in our program
datamember;
member function;
};


1)private: whenever datamembers and membar functions are private, they cannot be accessed directly using objects.
class A
{
int a; //int a=100;//not allowed ,direct initilization not allowed
void get()
{
a=100;
cout<<a;//allowed
}//private data can be accessed within member function of same class
}
void main()
{
	obj;
obj.a=100;//not allowed whenever datamembers and member functions are private cannot be accessed directly using objects.
obj.get();//not allowed whenever datamembers and member functions are private cannot be accessed directly using objects.
   //. is called membership operator
} 


Therefore it is better to use one public member
class A
{
 int a; //int a=100;//not allowed ,direct initilization not allowed
public void get()
{
a=100;
cout<<a;//allowed
}
}
void main()
{
	obj;
obj.a=100;//not allowed whenever datamembers and member functions are private cannot be accessed directly using objects.
obj.get();// allowed 
   //. is called membership operator
} 

keypoint: when all the members are private,it is useless because to access the members,we have to declared object,where the object is generally declred and where members are called i.e from the main(),and main() is outside the class.thumb rule is private members are not visible outside the class.
called as datahiding...declared one public()

========================================================================================
class student
{
private:
int id;
char name;
float fee;
public:
void get()//inline function
{
cout<<"enter id and fee";

cin>>id>>fee;
cout<<"id = "<<id<<endl;
}
};
void main()
{

}




class student
{
private:
int id;
char name;
float fee;
public:
void get();
};
void student::get()//not inline ::scope operator
{
cout<<"enter id and fee";

cin>>id>>fee;
cout<<"id = "<<id<<endl;
cout<<"fee = "<<fee<<endl;
}
 
void main()
{
student stu;//mem allocated
stu.get();

}

=========================================================================
OBJECT
To access class members,we should define objects because when class is declared memory is not allocated,when object is defined then only memory is allocated.

ex: int a,b;
int is logical copy occupies no memory
a,b is physical copy ,memory gets allocated

ex:student stu;
stu.get();
stu.put();
thru object we can access class members...

Object is :
1) a variable of type class.
2)an instance/xerox copy of a class
3)it is physical representation of a class.
==========================================================================
Difference between procedural programming and object-oriented programming

1)In procedural programming, the program is divided into small parts called functions.	
In object-oriented programming, the program is divided into small parts called objects.

2)It is less secure than OOPs. 
Data hiding is possible in object-oriented programming . So, it is more secure than procedural programming.

3)There is no access specifier in procedural programming.
  Object-oriented programming has access specifiers like private, public, protected, etc.

4)In procedural programming, data moves freely within the system from one function to another.	
In OOP, objects can move and communicate with each other via member functions.

5)There is no code reusability present in procedural programming.
	It offers code reusability by using the feature of inheritance.
===============================================================================================
C++ Features

Popular
C++ can be the base language for many other programming languages that supports the feature of object-oriented programming. 

 Compiler based
C++ is a compiler-based programming language, which means no C++ program can be executed without compilation. C++ compiler is easily available, and it requires very little space for storage. First, we need to compile our program using a compiler, and then we can execute our program.

Machine Independent

Platform:
Platform consists of processor/cpu and operating system.

Platform Dependent ?
The code which can only be run on same platform on which it was compiled. Compiled code cannot run on any other platforms.such language is called as platform dependent .
ex: C,C++

Here, same machine code which is compiled on windows,cannot be run on Linux or MAC OS.
To run the code on MAC OS ,first we will have to compile in MAC OS.
so such languages do not support code portability.


A C++ executable is not platform-independent (compiled programs on Linux won’t run on Windows), however, they are machine-independent.  Suppose you have written a piece of code that can run on Linux/Windows/Mac OSx which makes the C++ Machine Independent but the executable file of the C++ cannot run on different operating systems.



Rich Library
C++ provides a lot of inbuilt functions that make the development fast. Following are the libraries used in C++ programming are:

<iostream>
<cmath>
<cstdlib>
<fstream>

 Memory Management
C++ provides very efficient management techniques. The various memory management operators help save the memory and improve the program's efficiency. These operators allocate and deallocate memory at run time. Some common memory management operators available C++ are new, delete etc.

Object-Oriented
In C++, object-oriented concepts like data hiding, encapsulation, and data abstraction can easily be implemented using keyword class, private, public, and protected access specifiers. Object-oriented makes development and maintenance easier.

====================================================================
Difference between C and C++

C was developed by Dennis Ritchie between the year 1969 and 1973 at AT&T Bell Labs.	
C++ was developed by Bjarne Stroustrup in 1979.

C does no support polymorphism, encapsulation, and inheritance which means that C does not support object oriented programming.	
C++ supports polymorphism, encapsulation, and inheritance because it is an object oriented programming language.

C supports procedural programming.	 
C++ supports object oriented programming paradigms.

Data and functions are separated in C because it is a procedural programming language.	
Data and functions are encapsulated together in form of an object in C++.

C does not support data hiding so not secured.	
C++ supports data hiding with the help of private access specifier,secured.

Functions in C are not defined inside structures.	
Functions can be used inside a structure in C++.

C does not support inheritance.	
C++ supports inheritance.

Instead of focusing on data, C focuses on functions.	
C++ focuses on data instead of focusing on method or procedure.

C provides malloc() and calloc() functions for dynamic memory allocation, and free() for memory de-allocation.	
C++ provides new operator for memory allocation and delete operator for memory de-allocation.

Direct support for exception handling is not supported by C.	
Exception handling is supported by C++.

scanf() and printf() functions are used for input/output in C.	
cin and cout are used for input/output in C++.

C structures don’t have access modifiers.	
C ++ structures have access modifiers.

C does not support reference variables.
C++ supports reference variables.
========================================================================
Types of Variables
There are three types of variables based on the scope of variables in C++
Local Variables
Instance Variables
Static Variables

local variable
the variable declared within the parenthesis of any function or any block is 
called as local variable.
These variables are created when entered into the block or the function is called and destroyed after exiting from the block or when the call returns from the function.
The scope of these variables exists only within the block in which the variable is declared. i.e. we can access this variable only within that block.
1)local variable cannot be declared globally 
2)Initialization of Local Variable is Mandatory.
3)scope and lifetime is within the block/within the function
4)storage is stack section

lifetime means how long the variable exists in the memory
scope means how long the variable or value of that variable can be accessed
in local variable lifetime depends on scope of variable

#include<stdio.h>
int main()
{
	int a=10;
	 printf("%d",a);//10
	 {
		 int a=100;
		 printf("%d",a);//100
	 }
	 printf("%d",a);//10
}

global variable
Declaring global variables: Global variables are usually declared outside of all of the functions and blocks, at the top of the program. They can be accessed from any portion of the program.
variable declared outside the function/block is called as global variable
initial value is 0
storage is data section
lifetime-->thru out the program
scope-->thru out the program

#include <iostream>
using namespace std;
void fun();
int a=10;
int main()
{
    cout<<"Hello World";
    fun();
}
void fun()
{

    cout<<a;
}
====================================================
Datatypes in c++

All variables use data type during declaration to restrict the type of data to be stored. Therefore, we can say that data types are used to tell the variables the type of data they can store. 
Whenever a variable is defined in C++, the compiler allocates some memory for that variable based on the data type with which it is declared. Every data type requires a different amount of memory. 

C++ supports the following data types:

Primary or Built-in or Fundamental data type:
These data types are built-in or predefined data types and can be used directly by the user to declare variables. example: int, char, float, bool, etc. 
Integer: The keyword used for integer data types is int. Integers typically require 4 bytes of memory space and range from -2147483648 to 2147483647.  
Character: Character data type is used for storing characters. The keyword used for the character data type is char. Characters typically require 1 byte of memory space and range from 0 to 255.  
Boolean: Boolean data type is used for storing Boolean or logical values. A Boolean variable can store either true or false. The keyword used for the Boolean data type is bool. 
Floating Point: Floating Point data type is used for storing single-precision floating-point values or decimal values. The keyword used for the floating-point data type is float. Float variables typically require 4 bytes of memory space. 
Double Floating Point: Double Floating Point data type is used for storing double-precision floating-point values or decimal values. The keyword used for the double floating-point data type is double. Double variables typically require 8 bytes of memory space. 
============================================================================
// C Program to implement Boolean data type
#include <stdbool.h>
int main()
{
      // Boolean data types declared
    bool a = true;
    bool b = false;
    printf("True : %d\n", a);
    printf("False : %d", b);
}
===========================================================================================
C++ I/O operation is using the stream concept. Stream is the sequence of bytes or flow of data. It makes the performance fast.
If bytes flow from main memory to device like printer, display screen, or a network connection, etc, this is called as output operation.
If bytes flow from device like printer, display screen, or a network connection, etc to main memory, this is called as input operation.

Header files available in C++ for Input/Output operations are: 
iostream: iostream stands for standard input-output stream. This header file contains definitions of objects like cin, cout, cerr, etc.


Different streams are used to represent different kinds of data flow.
==>istream is the class representing i/p stream,ostream is the class representing the o/p stream..to achiever the console input/output operations ,objects of these stream classes are used.
==>to manage input output operations predefined obj cin,cout..

Standard output stream (cout): Usually the standard output device is the display screen. The C++ cout statement is the instance of the ostream class. It is used to produce output on the standard output device which is usually the display screen. The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator(<<).
==>ostream class availabe in iostream.h thats why we have to include this headerfile


standard input stream (cin): Usually the input device in a computer is the keyboard. C++ cin statement is the instance of the class istream and is used to read input from the standard input device which is usually a keyboard. 
The extraction operator(>>) is used along with the object cin for reading inputs. The extraction operator extracts the data from the object cin which is entered using the keyboard.

#include <iostream>
using namespace std;
 
int main()
{
    int age;
 
    cout << "Enter your age:";
    cin >> age;
    cout << "\nYour age is: " << age;
 
    return 0;
}

Un-buffered standard error stream (cerr): The C++ cerr is the standard error stream that is used to output the errors. This is also an instance of the iostream class. As cerr in C++ is un-buffered so it is used when one needs to display the error message immediately. It does not have any buffer to store the error message and display it later.

// C++ program to illustrate std::cerr 
  
#include <iostream> 
using namespace std; 
int main() 
{ 
  
    // This will print "Welcome to GfG" 
    // in the error window 
    cerr << "Welcome to GfG! :: cerr"; 
  
    // This will print "Welcome to GfG" 
    // in the output window 
    cout << "Welcome to GfG! :: cout"; 
    return 0; 
} 
In the above program the Output of Line 11 will display an error window as:
RunTime Error in CPP code:

Welcome to GfG! :: cerr
==========================================================================
\n-->back\ character   endl-->manipulator
takes 1 byte                   no byte
==============================================================================
Constants:

  const keywords is used to define the constant value that cannot change during program execution. It means once we declare a variable as the constant in a program, the variable's value will be fixed and never be changed. If we try to change the value of the const type variable, it shows an error message in the program.

Use const keywords with different parameters:

Use const variable
Use const with pointers
Use const pointer with variables
Use const with function arguments
Use const with class member functions
Use const with class data members
Use const with class objects

1. Const variable
It is a const variable used to define the variable values that never be changed during the execution of a program. And if we try to modify the value, it throws an error.

Syntax

const data_type variable_name;   
Example: Program to use the const keyword in C++

Let's create a program to demonstrate the use of the const keyword in the C++ programming language.

#include <iostream>  
#include <conio.h>  
using namespace std;  
int main ()  
{  
// declare the value of the const  
const int num = 25;  
num = num + 10;  
return 0;  
}  

Note: While the declaration of the const variable in the C++ programming, we need to assign the value of the defined variables at the same time; else, it shows the compile-time error.
Note:Constants cannot appear on LHS of assignment operator(=)

use of const:
In C, a variable cannot be used to declare the size of an array. The size has to be defined using #define. Whereas,in c++,the size of an array can be specified using a const variable.
ex:
const int SIZE=10;
char arr[SIZE];//valid in c++ but invalid in c


=========================================================================
The const keyword can be used in pointer declarations,to make the pointer or the data to which the pointer is pointing to 
or both as constant.

1) Constant pointer to an integer
To create a const pointer, we need to use the const keyword before the pointer's name. We cannot change the address of the const pointer after its initialization, which means the pointer will always point to the same address once the pointer is initialized as the const pointer.

Example: Program to demonstrate the constant pointer using the const keyword

#include <iostream>  
using namespace std;  
int main ()  
{  
// declaration of the integer variables  
int x = 10, y = 20;  
// use const keyword to make constant pointer  
int* const ptr = &x; //  const integer ptr variable point address to the variable x  
  
// ptr = &y; // now ptr cannot changed their address  
*ptr = 15; // ptr can only change the value  
cout << " The value of x: " << x << endl;  
cout << " The value of ptr: " << *ptr << endl;  
return 0;  
}   
Output

The value of x: 15
The value of ptr: 15
In the above program, pointer ptr pointing to the address of int variable 'x' and ptr variable cannot be changed their address once it initialized, but the pointer ptr can change the value of x.

2. Pointer to a constant integer
It means the pointer points to the value of a const variable that cannot change.

Declaration of the pointer to the constant variable:
const int* x;   
Here, x is a pointer that point to a const integer type variable, and we can declare a pointer to the constant variable as,

char const* y;  
In this case, y is a pointer to point a char type const variable.

Example: Program to use the const keyword with a pointer to constant variable

#include <iostream>  
using namespace std;  
int main ()  
{  
// declare integer variable  
int x = 7, y = 10;  
  const int *ptr = &x; // here x become constant variable  
cout << " \n The initial value of ptr:" << *ptr;  
cout << " \n The value of x: " <<x;  
  
// *ptr = 15; It is invalid; we cannot directly assign a value to the ptr variable  
ptr = &y; //  here ptr variable pointing to the non const address 'y'  
  
cout << " \n The value of y: " <<y;  
cout << " \n The value of ptr:" << *ptr;   
return 0;  
}  

The initial value of ptr: 7
The value of x: 7
The value of y: 10
The value of ptr: 10
In the above program, pointer ptr points to the const int (x) variable, and the value of the int (x) variable can never change.

3)Constant pointer to a Constant Integer

int num1=10,num2=20;
const int *const ptr=&num1;
//ptr is a constant pointer to a constant integer

In this case,neither the address in the pointer be changed nor the contents at that address can be modified using that
pointer.

ptr=&num2;//not allowed
(*ptr)++;//not allowed
*ptr=20;//not allowed
