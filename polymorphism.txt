Generic Pointer
Generic pointer is that pointer which will hold the address of base class object or it can hold the address of derived class object.

Polymorphism

polymorphism is made up of 2 words poly means many and morphism means forms, so polymorphism means many forms.
it means identically " one name " named methods(member functions) that have different behaiour means one methodss have multiple forms.
Same message is pass to inherited classes and this classes will respond to the same message in different ways by  is called as polymorphism


Binding is the process of associating a function call to an object.
Different types of polymorphism are as follows
1)compile time polymorphism:
When binding occurs at compile time,it is known as compile time binding. All the methods are called on object at compile time. In compile-time polymorphism, the compiler determines which function or operation to call based on the number, types, and order of arguments. 
This kind of polymorphism is implemented using function overloading and operator overloading.such polymorphism is called as early binding or static binding because an object is bound to its function call at compile time.
==>At compile time,compiler will check the type of pointer rather than the type of data.



2)Runtime polymorphism:
When the binding process occurs at runtime ,it is called as runtime binding.
In order to invoke the appropriate function of the derived class,the compiler needs to bind that function call to the correct function defination.The decision of which function to be invoked is taken at a later stage(at runtime). Hence this feature is referred to as runtime binding.The generic pointer is capable of pointing to any object at runtime. hence it can invoke any function dynamically depending on the type of the object that it is pointing to . In run-time polymorphism, the decision of which function to call is determined at runtime based on the actual object type rather than the reference or pointer type. It is also known as Dynamic Polymorphism
Run Time Polymorphism can be exhibited by:

Method Overriding using Virtual Functions
Method Overriding
Method overriding refers to the process of creating a new definition of a function in a derived class that is already defined inside its base class. Some rules that must be followed while overriding a method are:
Method names must be the same.
Method parameters must be the same.

Virtual Function
Virtual Function is a member function that is declared as virtual in the base class and it can be overridden in the derived classes that inherit the base class.

Difference Between Compile Time And Run Time Polymorphism
Compile-Time Polymorphism and Run-Time Polymorphism

1)It is also called Static Polymorphism.	
It is also known as Dynamic Polymorphism.
2)In compile-time polymorphism, the compiler determines which function or operation to call based on the number, types, and order of arguments.	
In run-time polymorphism, the decision of which function to call is determined at runtime based on the actual object type rather than the reference or pointer type.
3)The function to be invoked is known at the compile time.	
The function to be invoked is known at the run time.
4)Compile-time Polymorphism can be exhibited by: Function Overloading and Operator Overloading
Run-time Polymorphism can be exhibited by Function Overriding.
5)Faster execution rate.
Comparatively slower execution rate.
6)Inheritance in not involved.	
Involves inheritance.
=============================================
Virtual Function
==>Polymorphism provides a way for the derived class to give its own defination of a method that has already been defined by the base class.This process is called as method overriding.To implement late binding, the function is declared with the keyword virtual in the base class.
==>To implement late binding, the function is declared with the keyword virtual in the base class. usually, when there is a possibility that a function in the base class may be overridden in the derived class this function is marked as virtual.
The function in the derived class is overridden with same signature and return type.
==>Polymorphism relies on runtime binding.To achieve runtime binding virtual keyword should be used.virtual keyword will tell the compiler to do binding at runtime and not at compile time.
==>It tells the compiler to perform late binding where the compiler matches the object with the right called function and executes it during the runtime. This technique falls under Runtime Polymorphism.

1)virtual function is a member function that can be redefined for the derived classes.
2)The function in the base class,which are overridden  in the subsequent derived classes, are also considered virtual by the compiler.virtual function is redefined in all the derived classes even if the virtual keyword is not written.
3)constructors can not be made Virtual Function
4)destructor can be made Virtual Function
5)virtual keyword should not be written in definition

**At runtime binding the compiler will check the type of data rather than the type of pointer.According to the type of data the compiler will invoke the function of that class.
**The idea is that virtual functions are called according to the type of the object instance pointed to or referenced, not according to the type of the pointer or reference.
In other words, virtual functions are resolved late, at runtime.

================================================================================================
==>A base class pointer can point to derived class object without needing a cast. This is termed as up-casting. Derived object can be assigned to base object without any cast but the reverse is not true.

Compile time binding
Employee * ptr,e1;
Salesperson sp1;
ptr=&e1;
ptr=&sp1;
ptr->computesalary();

==>Compiler tries to find computesalary() in Employee class and not in Salesperson (though ptr is pointing to sp1  object of Salesperson class).The reason is that the compiler selects the member function according to the type of pointer rather than the type of object being pointed to. The compiler tries to govern the method invocation using compiletime or static type binding of the generic pointer, which is of type Employee .
==>so, the above call to computesalary() is resolved by the compiler as Employee::computesalary(), even when the pointer is actually pointing to Salesperson object.
==>If the  Employee class doesnot have computesalary() . This results in a compile-time error as computesalary() is not a member of the class Employee.

Need of Type-Casting

Inorder to invoke the function by the type of the object whose address it is holding, there is a need to typecast the generic pointer to the required type. It typecast the generic pointer ptr to salesperson classtype.Then the computesalary() of salesperson class is invoked. so, depending on which computesalary() to call,employee pointer is typecasted to the particular datatype.
Employee* ptr;
switch(ptr)
{
	case 1:(wageemployee*) ptr->computesalary();
	case 2:(salesperson*) ptr->computesalary();
}

Drawbacks of Typecasting
1)If a new category of employee named clerk is added in the hieracrchy,changes have to be made in the above source code by adding a new case where the generic pointer can be typecast to the category clerk.It becomes practically infeasible from the maintenance point of view to alter the source code every time the application is extended to add a new category of employees.

2)The function that is invoked need not be an overriden function. After the generic pointer is typecast to any derived class type,it always invokes the function of that derived class irrespective of the contents of the pointer.

To resolve these problems,virtual function are used.

==>C++ supports polymorphism by allowing member functions defined in baseclass to be overridden. When these functions are made virtual in the base class and are invoked using generic pointer, then dynamic datatypes of thos pointer is checked i.e the type of the object it points to at runtime.

==>If the function is non virtual,static type of pointer is checked and accordingly the member function of the baseclass is invoked

Points on virtual function:
1)keyword virtual can be used only in context with overriden function.That is ,if computesalary() is not declared in the class Employee, then the compilee will flash an error.
computesalry() is not the member of the class Employee
2)Specific functions of the derived class cannot be called using generic pointer.
ptr->somespecificfunction()
somespecificfunction() is a specific function of salesperson class. Since this function is non virtual, compile time binding will takes place. static type of the pointer will be considered by the compiler to resolve this call.Since this function is not present in the baseclass,compiler will give error.

3)Virtual functions must be non static member functions of the class since the virtual function mechanism relies on the specific object to determine which implementation of the function should be called. This is not possible for static function because they donot work with objects of the class and hence they cannot be declared as virtual.
#include<iostream>
using namespace std;
class demo
{
	public:
		 static void show()
		{
			cout<<"in base";
		}
};
class demo1 : public demo
{
	public:
		 static void show()
		{
			cout<<"in derived";
		}
};
int main()
{
	demo * ptr=new demo1();
	ptr->show();
	
}

4)Virtual functions cannot be friend function.Friend function are not members of the base class and hence cannot be inherited or overrided.
5)Functions that are overriden in the derived class are declared as virtual in the base class. since the base class pointer is used to invoke the appropriate function at runtime.
6)Constructors cannot be made virtual .When an object of a derived class is created, base class constructor should be called first.But if th base class constructor is made virtual, the derived class constructor wil be directly called and the base class members will not be initialized. Therefore forseeing the problem,compiler doesnot allow virtaul constructors.
7)If a function is declared as virtual in the base class then,it will be treated as virtual in derived class even if the keyword virtual is not used.

=======================================================================================
Pure virtual function
1)A function without executable code is called as Pure virtual function.declared by using a specifier(=0) in the declaration of a virtual member function in the class declaration
2) Pure virtual function is represented by(=0) in the function declaration and not in the definition
ex:virtual float computesalary()=0;
3)A class contains atleast 1 pure virtual function than that class is called as abstact class
4)if any class contain all the pure virtual function then that class is calles as pure abstract  class
5)we can not create object of an abstract class
6)however we can create pointer  of an abstract class.
7)if any base class contains pure virtual function then the pure virtual function has to be overrided in the derived class and give the implementation according to the requirements
8)Abstract class supports runtime polymorphism.
9)if Pure virtual function is not overrided in the derived class than the derived class should be declared as abstract.
10)If a class is too generic to define its object then the class is made abstract.so the sole purpose of abstract classes is to provide a baseclass for other classes.
11)An abstract class can have constructors. 

Sometimes implementation of all functions cannot be provided in a base class because we don’t know the implementation. Such a class is called an abstract class.For example, let Shape be a base class. We cannot provide the implementation of function draw() in Shape, but we know every derived class must have an implementation of draw().other methods can be pure virtual function or virtual function or concrete funtion.
ex: shape is a base class which is abstract.several other classes like circle,rectangle can be derived from it. The common attributes and behaviour of all shapes are bundled together in shape class. draw() and area() are the two common behaviours of all the above mentioned shapes.
==>A shape hierarchy may define abstract class that requires programmers using it to provide their own implementation of the class by creating a derived class. This hierarchy is easily extensible.

ex:
In class Employee,computesalary() was added to implement runtime polymorphism.
float computesalary()
{
	return 0.0f;
}
Actually this implementation is unnecessary and does not ake any sense. This function is never called ,but its existence in the class Employee is necessary to enable polymorphism.
==>If a virtual function doesnot contain any meaningful code or if it has been added merly to ahieve dynamic binding,then it is made pure virtual funtion.

Why Destructorcan be made virtual?
class A
{
	public :
	virtual ~A()
	{
		cout<<"In A's Destructor";
	}
};
class B :public A
{
	public :
	~B()
	{
		cout<<"In B's Destructor";
	}
};
int main()
{
A * aptr=new B();
delete aptr;
}

==If a base class pointer points to a derived object created on heap and the memory is freed by delete with base pointer the base class destructor is called.The deried class destructor is not invoked at all. To resole this problem,the base class destructor is made virtual.
ex:
Class A is a base class and B is derived from A. The destructor is made virtual in class A and an object of class B is created on heap using new and the address is stored in the base class A pointer i.e aptr.For the statement delete aptr, the destructor for the derived class is invoked first.
==If the destructor is not made virtual, the base class destructor is called directly without the derived class destructor being called first. This leads to memory related problems.
===================================



==================================================================

Similarities between virtual function and pure virtual function
1)These are the concepts of Run-time polymorphism.
2)These functions can’t be static.
3)constructor cannot be pure/virtual fun
4)destructor can be pure/virtual
5)can be override

Difference between virtual function and pure virtual function in C++

1)A virtual function is a member function of base class which can be redefined by derived class.	
A pure virtual function is a member function of base class whose only declaration is provided in base class and should be defined in derived class otherwise derived class also becomes abstract.


2)Classes having virtual functions are not abstract.
Base class containing pure virtual function becomes abstract.

3)Syntax:
 
virtual<func_type><func_name>() 
{ 
    // code 
} 
Syntax:
 
virtual<func_type><func_name>() 
    = 0; 

4)Definition is given in base class.	
No definition is given in base class.

5)Base class having virtual function can be instantiated i.e. its object can be made.
	Base class having pure virtual function becomes abstract i.e. it cannot be instantiated.

6)If derived class do not redefine virtual function of base class, then it does not affect compilation.	
If derived class do not redefine virtual function of base class, then no compilation error but derived class also becomes abstract just like the base class.

7)All derived class may or may not redefine virtual function of base class.
All derived class must redefine pure virtual function of base class otherwise derived class also becomes abstract just like base class.
=============================================================================
FAQ:What happens when a virtual function is called inside a non-virtual function in C++

#include <iostream>
using namespace std;
 class Base
{
public:
    void print()
    {
        cout << "Base class print function \n";
    }
    void invoke()
    {
        cout << "Base class invoke function \n";
        this -> print();
    }
};
 
class Derived: public Base
{
public:
    void print()
    {
        cout << "Derived class print function \n" ;
    }
    void invoke()
    {
        cout << "Derived class invoke function \n";
        this -> print();
    }
};
 
int main()
{
    Base *b = new Derived;
    b -> invoke();
    return 0;
}
Output:

Base class invoke function
Base class print function
Since there is no virtual function, run time polymorphic behavior doesn’t work in the above code. 


#include <iostream>
using namespace std;
 class Base
{
public:
    virtual void print()
    {
        cout << "Base class print function \n";
    }
    void invoke()
    {
        cout << "Base class invoke function \n";
        this -> print();
    }
};
 
class Derived: public Base
{
public:
    void print()
    {
        cout << "Derived class print function \n" ;
    }
    void invoke()
    {
        cout << "Derived class invoke function \n";
        this -> print(); // called under non - virtual function
    }
};
 
int main()
{
    Base *b = new Derived;
    b -> invoke();
    return 0;
}
Output:


Base class invoke function
Derived class print function
So polymorphic behaviour works even when a virtual function is called inside a non-virtual function. The output can be guessed from the fact that the function to be called is decided at run-time using the vptr and vtable.

==========================================================================================

========================================================================================

Types of Classes:

Concrete class:
A class in which all the functionalities of an object are defined is called as concrete class.
 
Abstract class:
A class which contains generic/common features that multiple derived class can share.

pure abstract class:
A class in which all the member functions are pure virtual functions is called as pure abstract class. It is just an interface and cannot be instantiated.

Polymorphic class:
A class that contains at least one virtual function is called as polymorphic class.
=================================================================================

How virtual function works?
class A
{
	//without virtual function
};
class B
{
	//with virtual function
};
int main()
{
	A a;
	B b;
	cout<<"size of object a is "<<sizeof(a);
	cout<<"size of object a is "<<sizeof(b);
}
class B contains a virtual function whereas class A doesnot contain any virtual function. If the size of the objects of both the classes A and B is compared, then size of object b is 8bytes more than the size of object a.The reason is, for every class which contains at least one virtual function, the compiler implicitly adds a virtual pointer.


=======================================================================================
If a class contains a virtual function then the compiler itself does two things.

1)If an object of that class is created then a virtual pointer (VPTR) is inserted as a data member of the class to point to the VTABLE of that class. For each new object created, a new virtual pointer is inserted as a data member of that class.
2)Irrespective of whether the object is created or not, the class contains as a member a static array of function pointers called VTABLE. Cells of this table store the address of each virtual function contained in that class.

Virtual Functions in C++

The most common use of runtime binding  is with base class pointers or references calling derived class functions. This is called runtime polymorphism and is implemented in C++ using virtual functions.
A virtual function is a member function that is declared within a base class with the virtual keyword and is re-defined (Overridden) by a derived class. When a class contains a virtual function, it can be overridden in its derived class and tells the compiler to perform dynamic linkage (or late binding) on the function. Now, the virtual functions are implemented in C++ by using vTable and vPtr.

What is VTable ?
==>VTable is a class specific. It is a static member of the class since all the objects of a class refer to the same virtual table. It contains the addresses of the respective virtual functions of that class. VTable  is a constant array of function pointers which contains pointers to all virtual functions of the class. All the object of a class refer to its own virtual table.
==>If in the derived class,a function that is declared as virtual in the base class is not overridden, then the compiler uses the address of the base class version in the derived class virtual table.


What is Vptr (Virtual Pointer)?

==>Every object of a polymorphic class has a hidden pointer called virtual pointer(vptr). it is a pointer to VTable and is automatically initialized to the starting address of the VTable in the constructor.
==>The virtual pointer or _vptr is a hidden pointer that is added by the compiler as a member of the class to point to the VTable of that class. Every object of a class containing virtual functions, a vptr is added to point to the vTable of that class. It’s important to note that vptr is created only if a class has or inherits a virtual function.
==>The setting up of the VTable for each polymorphic class, initializing the Vptr and inserting the codefor the function call happens automatically, the programmer doesnot have to worry about it.

consider Employee and Salesperson are polymorphic class.

==>when a class containing a virtual function is created or a class is derived from a class that contains virtual functions,compiler creates a unique VTable for that class.In VTable ,the compiler stores the addresses of all virtual functions.Each object contains vptr that points to VTable of that class.
==>The compiler places Vptr as a data member in the class created per object.Vptr is initialized to the starting address of the appropriate VTable.when salesperson object is created,it contains VPtr as one ofits data members which points to the appropriate VTable.

int main()
{
Employee * ptr;
ptr=new Salesperson();
ptr->display();
}

The compiler picks up the Vptr of the object pointed by ptr.Thus instead of calling Employee::display() the compiler generates the code that says the function at Vptr should be called.The fectching of Vptr and the determination of the actual function address occur at runtime,thus late binding is achieved.

// C++ program to show the working of vtable and vptr 
#include <iostream> 
using namespace std; 
#include<iostream>
using namespace std;







// base class 
class Base { 
public: 
    virtual void function1() 
    { 
        cout << "Base function1()" << endl; 
    } 
    virtual void function2() 
    { 
        cout << "Base function2()" << endl; 
    } 
    virtual void function3() 
    { 
        cout << "Base function3()" << endl; 
    } 
   virtual ~Base() 
    {
    	cout <<"in base dest\n";
	}
}; 
  
// class derived from Base 
class Derived1 : public Base { 
public: 
    // overriding function1() 
    void function1() 
    { 
        cout << "Derived1 function1()" << endl; 
    } 
    // not overriding function2() and function3() 
	~Derived1() 
    {
    	cout <<"in Derived1 dest\n";
	}
	
	}; 
  
// class derived from Derived1 
class Derived2 : public Derived1 { 
public: 
    // again overriding function2() 
    void function2() 
    { 
        cout << "Derived2 function2()" << endl; 
    } 
    // not overriding function1() and function3() 
   
~Derived2() 
    {
    	cout <<"in Derived2 dest\n";
	}	
}; 
  
// driver code 
int main() 
{ 
    // defining base class pointers 
    Base* ptr1 = new Base(); 
    Base* ptr2 = new Derived1(); 
    Base* ptr3 = new Derived2(); 
  
    // calling all functions 
    ptr1->function1(); 
    ptr1->function2(); 
    ptr1->function3(); 
    ptr2->function1(); 
    ptr2->function2(); 
    ptr2->function3(); 
    ptr3->function1(); 
    ptr3->function2(); 
    ptr3->function3(); 
  
    // deleting objects 
    delete ptr1; 
    delete ptr2; 
    delete ptr3; 
  
    return 0; 
}

1)A class contains atleast one virtual function,that class is calles as polymorphic class
2)compiler implicitely add a virtual pointer for every polymorphic class i.e vptr
3)vptr is created per object
4)vtable is called as static array of function pointer.
5)vtable is created per class
6)vtable will store the address of all the virtual functions
7)vptr will point to the starting address of the table.






